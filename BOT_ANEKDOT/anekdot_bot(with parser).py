# –ø–æ–ª–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from random import choice

# –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å aiogram
from aiogram import Bot, Dispatcher, executor, types
# –ö–ª–∞—Å—Å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ, –∫–∞–∫ –∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
from aiogram.dispatcher.filters import Text

# –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
from BOT_ANEKDOT.Bot_API import TOKEN, START_MESSAGE, BOT_DESCRIPTION, HELP_COMMANDS, NEGATIVE_ANSWER, RANDOM_STIKERS
from BOT_ANEKDOT.Keyboards import keyboard_anekdots, start_menu_keyboard, keyboard_yes_or_no
from BOT_ANEKDOT.anekdots_category_A import anekdots_A
from BOT_ANEKDOT.anekdots_category_B import anekdots_B

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
bot_function = '–°–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã(—Å –ø–∞—Ä—Å–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö)'
# –í—ã–∑—ã–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
bot = Bot(token=TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
dp = Dispatcher(bot=bot)
# —Å—á–µ—Ç—á–∏–∫, —Å–∫–æ–ª—å–∫–æ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –±–æ—Ç –≤—ã–¥–∞–ª
count_of_anekdots = 0
# —Å—á–µ—Ç—á–∏–∫, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
count_turned_back = 0


# –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ start_polling –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–Ω—Ç–µ
async def working_message(_):
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!')


# —Å—Ç—Ä–æ–∫–∞ —Å —Å–æ–±–∞–∫–æ–π - –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–º–º–∞–Ω–¥—É /start, message_handler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# –∫–æ–º–∞–Ω–¥—ã –ª—É—á—à–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Ç–∏–ø - —Ç–µ–∫—Å—Ç, —Ç–æ –ª—é–±–æ–µ –≤–≤–µ–¥–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
@dp.message_handler(commands=['start'])
# –≤ —Å–∫–æ–±–∫–∞—Ö —è–≤–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞–º –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ —Ç–∏–ø "—Å–æ–æ–±—â–µ–Ω–∏–µ"
async def start_command(message: types.Message):
    # –æ—Ç–ø—Ä—è–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä —Å –æ–±–µ–∑—å—è–Ω–∫–æ–π
    # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–π–¥–∏ —á–∞—Ç–∞, —á—Ç–æ–±—ã –±–æ—Ç –∑–Ω–∞–ª, –∫—É–¥–∞ –∏ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä
    # chat.id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∏ –ª–∏—á–∫—É, from_user.id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¢–û–õ–¨–ö–û –≤ –ª–∏—á–∫—É
    await bot.send_sticker(message.from_user.id,
                           sticker='CAACAgIAAxkBAAEGgXVjfNOtuTn4EpCXiwABiO5CpH0pR-sAAlQTAAIwS9FLhKW9odrtI-grBA')
    # –∫–æ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—à—å parse_mode, –Ω—É–∂–Ω–æ –∏ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º
    # parse_mode - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ HTML, —Ç–∞–∫ –∫–∞–∫ –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —É –º–µ–Ω—è –µ—Å—Ç—å HTML —ç–ª–µ–º–µ–Ω—Ç—ã
    # –≤—ã–≤–æ–¥–∏–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞—Ç–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    await bot.send_message(chat_id=message.from_user.id,
                           text=START_MESSAGE.format(bot_function),
                           parse_mode="HTML")
    await bot.send_message(chat_id=message.from_user.id,
                           text='–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∂—É –∞–Ω–µ–∫–¥–æ—Ç?',
                           reply_markup=start_menu_keyboard)
    await message.delete()  # —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç


# –î–∞–ª–µ–µ –∏–¥—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è - –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–ø–∏—Å–∞–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ /start
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP_COMMANDS,
                           parse_mode="HTML")
    await message.delete()


@dp.message_handler(commands=['description'])
async def description_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=BOT_DESCRIPTION.format(bot_function),
                           parse_mode="HTML")
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker='CAACAgIAAxkBAAEGhhZjfkiQAmJ1f0QPwxiksP_h1AaBbwACARQAAkd-2Uukq5EXc5ZdGisE')
    await message.delete()


@dp.message_handler(commands=['count'])
async def count_command(message: types.Message):
    global count_of_anekdots
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ë–æ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞–ª —Ç–µ–±–µ –∞–Ω–µ–∫–¥–æ—Ç {count_of_anekdots} —Ä–∞–∑')
    await bot.send_message(chat_id=message.from_user.id,
                           text='–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?üòè',
                           reply_markup=keyboard_yes_or_no)
    await message.delete()


#–í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /count
@dp.callback_query_handler()
async def yes_or_no(callback: types.CallbackQuery):
    if callback.data == 'YES':
        await callback.answer('–°–ø–∞—Å–∏–±–æ!üò≥')
    elif callback.data == 'NO':
        await callback.answer(choice(NEGATIVE_ANSWER))


@dp.message_handler(commands=['sticker'])
async def sticker_command(message: types.Message):
    await bot.send_sticker(chat_id=message.from_user.id, sticker=choice(RANDOM_STIKERS))
    await message.delete()


# –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ –±–æ—Ç–∞ - —Ç—É—Ç –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤—Å—è –º–∞–≥–∏—è(–∏–ª–∏ –Ω–µ—Ç, –ø–æ–∫–∞ —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞—Ç—å –Ω–µ –º–æ–≥—É)
@dp.message_handler(Text(equals='–•–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç!'))
async def lets_joke(message: types.Message):
    global count_turned_back
    if count_turned_back == 0:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–µ–∫–¥–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø–æ –¥—É—à–µ.',
                               reply_markup=keyboard_anekdots)
    elif count_turned_back > 0:
        await bot.send_message(chat_id=message.from_user.id, text='–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è!üòçü•∞')
        await bot.send_sticker(chat_id=message.from_user.id,
                               sticker='CAACAgIAAxkBAAEGgcJjfPSe_ZTgqK4eDpgtR1_R6ayOewACOhYAAopTEUjg9AEWxcK0uysE')
        await bot.send_message(chat_id=message.from_user.id, text='–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–µ–∫–¥–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø–æ –¥—É—à–µ.',
                               reply_markup=keyboard_anekdots)


@dp.message_handler(Text(equals='–ù–µ —Ö–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç!'))
async def no_jokes(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text='–ù—É –ª–∞–¥–Ω–æü•∫')
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker='CAACAgIAAxkBAAEGgaxjfOrdgageaX8sdVgZT96CbgLmWgACyhYAAnQjGEmw8Cp6CRsmeCsE')
    await bot.send_message(chat_id=message.from_user.id,
                           text='–ï—Å–ª–∏ –≤—Å—ë —Ç–∞–∫–∏ –∑–∞—Ö–æ—á–µ—à—å –∞–Ω–µ–∫–¥–æ—Ç, –Ω–∞–∂–º–∏ "–•–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç"‚ò∫Ô∏è.',
                           reply_markup=start_menu_keyboard)


@dp.message_handler(Text(equals='–ê'))
async def Anekdots_A(message: types.Message):
    global count_of_anekdots
    await bot.send_message(chat_id=message.from_user.id, text=choice(anekdots_A))
    count_of_anekdots += 1


@dp.message_handler(Text(equals='–ë'))
async def Anekdots_B(message: types.Message):
    global count_of_anekdots
    await bot.send_message(chat_id=message.from_user.id, text=choice(anekdots_B))
    count_of_anekdots += 1


@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥'))
async def return_back(message: types.Message):
    global count_turned_back
    await bot.send_message(chat_id=message.from_user.id,
                           text='–ù—É –ª–∞–¥–Ω–æ.\n–ï—Å–ª–∏ –≤—Å—ë —Ç–∞–∫–∏ –∑–∞—Ö–æ—á–µ—à—å –∞–Ω–µ–∫–¥–æ—Ç, –Ω–∞–∂–º–∏ "–•–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç"‚ò∫Ô∏è.',
                           reply_markup=start_menu_keyboard)
    count_turned_back += 1


# —ç—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
# —Ç.–µ., –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—è –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª, –∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª
if __name__ == '__main__':
    # on_startup  - –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –±–µ–∑–æ—à–∏–±–æ—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    # skip_updates - –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±–æ—Ç –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —ç–∫–∑–µ–∫—É—Ç–æ—Ä–∞
    executor.start_polling(dp, on_startup=working_message, skip_updates=True)
